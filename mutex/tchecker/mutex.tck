#clock:size:name
#int:size:min:max:init:name
#process:name
#event:name
#location:process:name{attributes}
#edge:process:source:target:event:{attributes}
#sync:events
#   where
#   attributes is a colon-separated list of key:value
#   events is a colon-separated list of process@event

# Model of Fischer's protocol introduced in:
# Henning Dierks:
# Comparing model checking and logical reasoning for real-time systems. Formal Asp.
# Comput. 16(2): 104-120 (2004)


# Mutual exclusion between 2 processes can be checked by verifying that both processes
# can't be in their state unsafe at the same time.

system:mutex_2_1_2

event:tau
event:set_g1
event:set_not_g1
event:set_safe1
event:set_unsafe1
event:poll_g1
event:poll_not_g1
event:poll_safe1
event:poll_unsafe1
event:set_g2
event:set_not_g2
event:set_safe2
event:set_unsafe2
event:poll_g2
event:poll_not_g2
event:poll_safe2
event:poll_unsafe2

# Process InOut
process:InOut
clock:1:x
int:1:0:1:0:g1
int:1:0:1:0:safe1
int:1:0:1:0:g2
int:1:0:1:0:safe2
location:InOut:init{initial:}
edge:InOut:init:init:set_not_g1{do:g1=0;x=0}
edge:InOut:init:init:set_safe1{do:safe1=1;x=0}
edge:InOut:init:init:set_unsafe1{do:safe1=0;x=0}
edge:InOut:init:init:poll_g1{provided:g1==1&&x>0}
edge:InOut:init:init:poll_not_g1{provided:g1==0&&x>0}
edge:InOut:init:init:poll_unsafe1{provided:safe1==0&&x>0}
edge:InOut:init:init:poll_safe1{provided:safe1==1&&x>0}
edge:InOut:init:init:set_g1{do:g1=1;x=0}

edge:InOut:init:init:set_not_g2{do:g2=0;x=0}
edge:InOut:init:init:set_safe2{do:safe2=1;x=0}
edge:InOut:init:init:set_unsafe2{do:safe2=0;x=0}
edge:InOut:init:init:poll_g2{provided:g2==1&&x>0}
edge:InOut:init:init:poll_not_g2{provided:g2==0&&x>0}
edge:InOut:init:init:poll_unsafe2{provided:safe2==0&&x>0}
edge:InOut:init:init:poll_safe2{provided:safe2==1&&x>0}
edge:InOut:init:init:set_g2{do:g2=1;x=0}

# Process A1
process:A1
clock:1:y_1
clock:1:z_1
int:1:0:1:1:polled_g1
int:1:0:3:0:pc_1
location:A1:init{initial: : committed:}
location:A1:Safe{invariant:z<=1}
location:A1:Unsafe{invariant:z<=1}
edge:A1:init:Safe:set_safe1
edge:A1:Safe:Safe:poll_g1{provided:pc_1==0&&z_1>0 : do:pc_1=1;polled_g1=1}
edge:A1:Safe:Safe:poll_not_g1{provided:pc_1==0&&z_1>0 : do:pc_1=1;polled_g1=0}
edge:A1:Safe:Safe:tau{provided:pc_1==1 : do:pc_1=3}
edge:A1:Safe:Safe:tau{provided:pc_1==3&&polled_g1==0 : do:pc_1=0;z_1=0}
edge:A1:Safe:Unsafe:set_unsafe1{provided:pc_1==3&&polled_g1==1 : do:pc_1=0;y_1=0;z_1=0}
edge:A1:Unsafe:Unsafe:tau{provided:pc_1==1 : do:pc_1=3}
edge:A1:Unsafe:Unsafe:tau{provided:pc_1==3 : do:pc_1=0;z_1=0}
edge:A1:Unsafe:Unsafe:poll_not_g1{provided:pc_1==0&&z_1>0 : do:pc_1=1;polled_g1=0}
edge:A1:Unsafe:Unsafe:poll_g1{provided:pc_1==0&&z_1>0 : do:pc_1=1;polled_g1=1}

# Process A2
process:A2
clock:1:y_2
clock:1:z_2
int:1:0:1:1:polled_g2
int:1:0:3:0:pc_2
location:A2:init{initial: : committed:}
location:A2:Safe{invariant:z<=1}
location:A2:Unsafe{invariant:z<=1}
edge:A2:init:Safe:set_safe2
edge:A2:Safe:Safe:poll_g2{provided:pc_2==0&&z_2>0 : do:pc_2=1;polled_g2=1}
edge:A2:Safe:Safe:poll_not_g2{provided:pc_2==0&&z_2>0 : do:pc_2=1;polled_g2=0}
edge:A2:Safe:Safe:tau{provided:pc_2==1 : do:pc_2=3}
edge:A2:Safe:Safe:tau{provided:pc_2==3&&polled_g2==0 : do:pc_2=0;z_2=0}
edge:A2:Safe:Unsafe:set_unsafe2{provided:pc_2==3&&polled_g2==1 : do:pc_2=0;y_2=0;z_2=0}
edge:A2:Unsafe:Unsafe:tau{provided:pc_2==1 : do:pc_2=3}
edge:A2:Unsafe:Unsafe:tau{provided:pc_2==3 : do:pc_2=0;z_2=0}
edge:A2:Unsafe:Unsafe:poll_not_g2{provided:pc_2==0&&z_2>0 : do:pc_2=1;polled_g2=0}
edge:A2:Unsafe:Unsafe:poll_g2{provided:pc_2==0&&z_2>0 : do:pc_2=1;polled_g2=1}

# Process Ctrl
process:Ctrl
clock:1:y
clock:1:z
int:1:0:1:1:polled_safe
int:1:0:3:0:pc
int:1:1:2:1:pid
location:Ctrl:init{initial: : committed:}
location:Ctrl:W{invariant:z<=1}
location:Ctrl:C{invariant:z<=1}
location:Ctrl:G{invariant:z<=1}
edge:Ctrl:init:W:set_not_g1
edge:Ctrl:W:W:tau{provided:pc==3&&polled_safe==0 : do:pc=0;z=0}
edge:Ctrl:W:W:tau{provided:pc==1 : do:pc=3}
edge:Ctrl:W:W:poll_safe1{provided:pc==0&&z>0 : do:pc=1;polled_safe=1}
edge:Ctrl:W:W:poll_unsafe1{provided:pc==0&&z>0 : do:pc=1;polled_safe=0}
edge:Ctrl:W:C:tau{provided:pc==3&&polled_safe==1 : do:pc=0;y=0;z=0}
edge:Ctrl:W:C:tau{provided:pc==3&&polled_safe==0 : do:pc=0;y=0;z=0}
edge:Ctrl:C:C:poll_safe1{provided:pc==0&&z>0 : do:pc=1;polled_safe=1}
edge:Ctrl:C:C:poll_unsafe1{provided:pc==0&&z>0 : do:pc=1;polled_safe=0}
edge:Ctrl:C:C:tau{provided:pc==1&&y<=2&&polled_safe==1 : do:pc=2}
edge:Ctrl:C:C:tau{provided:pc==1&&y>2&&polled_safe==1 : do:pc=3}
edge:Ctrl:C:C:tau{provided:pc==1&&polled_safe==0 : do:pc=3}
edge:Ctrl:C:C:tau{provided:pc==2 : do:pc=0;z=0}
edge:Ctrl:G:W:set_not_g1{provided:pc==3&&polled_safe==0 : do:pc=0;y=0;z=0}
edge:Ctrl:G:G:tau{provided:pc==3&&polled_safe==1 : do:pc=0;z=0}
edge:Ctrl:G:G:tau{provided:pc==1 : do:pc=3}
edge:Ctrl:G:G:poll_unsafe1{provided:pc==0&&z>0 : do:pc=1;polled_safe=0}
edge:Ctrl:G:G:poll_safe1{provided:pc==0&&z>0 : do:pc=1;polled_safe=1}
edge:Ctrl:C:G:set_g2{provided:pc==3&&polled_safe==1 : do:pc=0;pid=pid%2+1;y=0;z=0}

sync:Ctrl@set_g1:InOut@set_g1
sync:Ctrl@set_not_g1:InOut@set_not_g1
sync:Ctrl@set_g1:InOut@poll_g1
sync:Ctrl@set_not_g1:InOut@poll_not_g1
sync:A1@set_safe1:InOut@set_safe1
sync:A1@set_unsafe1:InOut@set_unsafe1
sync:A1@set_safe1:InOut@poll_safe1
sync:A1@set_unsafe1:InOut@poll_unsafe1

sync:Ctrl@set_g2:InOut@set_g2
sync:Ctrl@set_not_g2:InOut@set_not_g2
sync:Ctrl@set_g2:InOut@poll_g2
sync:Ctrl@set_not_g2:InOut@poll_not_g2
sync:A2@set_safe2:InOut@set_safe2
sync:A2@set_unsafe2:InOut@set_unsafe2
sync:A2@set_safe2:InOut@poll_safe2
sync:A2@set_unsafe2:InOut@poll_unsafe2

